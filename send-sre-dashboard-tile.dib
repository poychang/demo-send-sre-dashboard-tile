#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# 發送 Azure Portal 儀錶板上的 SRE 資訊圖表至指定頻道

每日將儀錶板上的重要資訊的圖表發送至團隊的指定頻道，提醒成員檢查各系統的狀態。

#!csharp

#i "nuget:https://api.nuget.org/v3/index.json"
#r "nuget:AdaptiveCards,3.0.0"
#r "nuget:Azure.Storage.Blobs,12.14.1"
#r "nuget:Microsoft.Playwright,1.30.0"
#r "nuget:System.Drawing.Common,7.0.0"

using AdaptiveCards;
using Azure.Storage.Blobs;
using Microsoft.Playwright;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using System.Net.Http.Headers;
using System.Text;
using System.IO;
using System.Net.Http;
using System.Diagnostics;

#!markdown

## 初始設定

建立設定檔以及發送至 Teams Channel 所需要的模型。

#!csharp

// 0. 設定：設定檔用的資料模型，以及發送到 Teams Channel 所對應的 JSON 屬性
public class TargetLabel
{
    public string Title { get; set; } = string.Empty;
    public string Subtitle { get; set; } = string.Empty;
}

public class MSteams {
    [JsonProperty("width")]
    public string Width { get; set; } = string.Empty;
    [JsonProperty("entities")]
    public List<Entity> Entities { get; set; } = default!;

    public class Entity {
        [JsonProperty("type")]
        public string Type { get; set; } = string.Empty;
        [JsonProperty("text")]
        public string Text { get; set; } = string.Empty;
        [JsonProperty("mentioned")]
        public Mentioned Mentioned { get; set; } = default!;
    }

    public class Mentioned {
        [JsonProperty("id")]
        public string Id { get; set; } = string.Empty;
        [JsonProperty("name")]
        public string Name { get; set; } = string.Empty;
    }
}

#!csharp

#!set --name YourAzurePortalAccount --value @input:"Please enter your Azure Portal account"
#!set --name YourAzurePortalPassword --value @password:"Please enter your Azure Portal password"

// 0. 設定：對應的儀錶板位置、登入帳號密碼、儲存截圖的位置、發送訊息的頻道 Webhook、以及要標註的成員/頻道
var config = new
{
    AzureDashboardUrl = "",
    AzurePortalAccount = YourAzurePortalAccount,
    AzurePortalPassword = YourAzurePortalPassword,
    AzureDashboardTargetLabels = new List<TargetLabel> { new TargetLabel {Title = "CPU", Subtitle = "All computers"} },
    AzureStorageContainerName = "",
    AzureStorageConnectionString = "",
    TeamsChannel = "",
    TeamsChannelMentionId = "",
    TeamsChannelMentionName = "",
};

#!markdown

## 自動化執行程式碼

主要使用 [Playwright](https://playwright.dev/) 自動化測試工具，這套工具可以讓開發者操作熱門網頁瀏覽器，執行端到端測試。

這裡透過他來開啟 Azure Portal 並開啟指定的儀表板，接著將儀表板上特定 Tile （圖表區塊）截圖並下載成圖片。

接著使用 [Azure.Storage.Blobs](https://github.com/Azure/azure-sdk-for-net/blob/Azure.Storage.Blobs_12.16.0/sdk/storage/Azure.Storage.Blobs/README.md) 將該圖片上傳到 Azure Blob Storage，並取得該圖片的 URL。

最後使用 [AdaptiveCards](https://adaptivecards.io/) 組合發送至 Microsoft Teams 的訊息卡片，裡面包含要發送的圖片、說明文字，以及要標註的指定成員或頻道名稱

#!csharp

static string UploadToBlob(string azureStorageConnectionString, string azureStorageContainerName, MemoryStream stream, string filePath) {
    var containerClient = new BlobServiceClient(azureStorageConnectionString).GetBlobContainerClient(azureStorageContainerName);

    if (!containerClient.Exists()) containerClient.Create();

    var blobClient = containerClient.GetBlobClient(filePath);
    blobClient.Upload(stream, true);

    return blobClient.Uri.ToString();
}

static string SaveToLocal(MemoryStream stream, string filePath) {
    if (!Directory.Exists(filePath)) Directory.CreateDirectory(Path.GetDirectoryName(filePath) ?? string.Empty);
    using var fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write);
    stream.WriteTo(fileStream);
    return filePath;
}

static async Task SendMessageToTeamsChannelAsync(string teamsChannel, string message) {
    var client = new HttpClient(new HttpClientHandler { UseProxy = false });
    client.DefaultRequestHeaders.Accept.Clear();
    client.DefaultRequestHeaders.Add("cache-control", "no-cache");
    client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));
    client.DefaultRequestHeaders.AcceptCharset.Add(new StringWithQualityHeaderValue("utf-8"));
    client.DefaultRequestHeaders.ConnectionClose = false;
    var content = $$"""
    {
        "type":"message",
        "attachments":[
            {
                "contentType":"application/vnd.microsoft.card.adaptive",
                "contentUrl":null,
                "content":{{message}}
            }
        ]
    }
    """;
    await client.PostAsync(new Uri(teamsChannel), new StringContent(content, Encoding.UTF8, "application/json"));
}

static string GenerateContentJson(IEnumerable<string> files, MSteams.Mentioned mention) {
    var card = new AdaptiveCard(new AdaptiveSchemaVersion(1, 2));
    var container = new AdaptiveContainer();

    files.ToList().ForEach(file => container.Items.Add(new AdaptiveImage(file)));
    card.Body.Add(new AdaptiveTextBlock($"<at>{mention.Name}</at> 麻煩大家確認一下唷"));
    card.Body.Add(container);

    var content = JObject.Parse(card.ToJson());
    var msTeams = new MSteams {
        Width = "Full",
        Entities = new List<MSteams.Entity>
        {
                new MSteams.Entity
                {
                    Type = "mention",
                    Text = $"<at>{mention.Name}</at>",
                    Mentioned = mention
                }
            }
    };
    content.Add(new JProperty("msteams", JObject.Parse(JsonConvert.SerializeObject(msTeams))));

    return JsonConvert.SerializeObject(content);
}

static void Ending(string responseContent) {
    display(responseContent);
}

#!csharp

var responseContent = "Welcome to SRE Functions!\n";

try {
    // 1. 登入：開啟 Azure Portal 的儀錶板，並輸入帳號密碼
    using var playwright = await Playwright.CreateAsync();
    await using var browser = await playwright.Chromium.LaunchAsync(new BrowserTypeLaunchOptions {
        Headless = true,
    });
    var context = await browser.NewContextAsync(
        new BrowserNewContextOptions {
            ViewportSize = new ViewportSize { Width = 1920, Height = 1080 },
        }
    );
    var page = await context.NewPageAsync();
    await page.GotoAsync(config.AzureDashboardUrl);
    await page.FillAsync("[name='loginfmt']", config.AzurePortalAccount);
    await page.ClickAsync("[type='submit']");
    await page.FillAsync("[name='passwd']", config.AzurePortalPassword);
    await page.ClickAsync("[type='submit']");

    // 1-2. 等待 2FA 身分驗證成功
    page.WaitForRequestAsync("https://login.microsoftonline.com/common/SAS/ProcessAuth").GetAwaiter().GetResult();
    page.WaitForTimeoutAsync(3_000).GetAwaiter().GetResult();
    // 1-3. 檢查是否出現「需要更多資訊」的訊息，這代表組織要求做個人資訊檢查
    var needProofUp = page.IsVisibleAsync("#idSubmit_ProofUp_Redirect").GetAwaiter().GetResult();
    if (needProofUp) {
        var message = "Your organization needs more information to keep your account secure. Please open Azure Portal manually to confirm.\n";
        responseContent += message;
        Ending(responseContent);
    }
    else {
        await page.ClickAsync("#idBtn_Back");
        responseContent += "Login success.\n";

        // 2. 等待：等儀表板上的圖表載入完成
        var stopWatch = Stopwatch.StartNew();
        await page.WaitForSelectorAsync("div.ext-loading-container", new() { State = WaitForSelectorState.Visible });
        await page.WaitForSelectorAsync("div.ext-loading-container", new() { State = WaitForSelectorState.Hidden, Timeout = 100_000 });
        responseContent += $"Dashboard loading success in {stopWatch.Elapsed.TotalSeconds:F2}s.\n";

        // 3. 截圖：擷取儀錶板上的目標區塊，並將截圖檔案上傳到 Azure Storage，取得截圖的網址
        stopWatch.Restart();
        var fileUrlList = new List<string>();
        foreach (var label in config.AzureDashboardTargetLabels.Select((v, i) => new { Value = v, Index = i })) {
            var targetName = $"div[aria-label='{label.Value.Title}'][data-assetname='{label.Value.Subtitle}']";
            var target = page.Locator(targetName);
            for (int i = 0; i < await target.CountAsync(); i++) {
                var screenshot = await target.Nth(i).ScreenshotAsync();
                using var stream = new MemoryStream(screenshot, writable: false);

                var fileName = $"SRE_{label.Value.Title}_{label.Index}_{i + 1:00}.png";
                var filePath = $"{DateTime.Now:yyyyMMdd}/{fileName}";
                var blobUri = UploadToBlob(config.AzureStorageConnectionString, config.AzureStorageContainerName, stream, filePath);
                //var blobUri = SaveToLocal(stream, filePath);

                fileUrlList.Add(blobUri);
                responseContent += $"Take screenshot of '{label.Value.Title}' and upload to '{filePath}'.\n";
            }
        }
        responseContent += $"Screenshot upload success in {stopWatch.Elapsed.TotalSeconds:F2}s.\n";

        // 4. 發送：發送截圖到指定的 Teams Channel
        stopWatch.Restart();
        var content = GenerateContentJson(fileUrlList, new MSteams.Mentioned { Id = config.TeamsChannelMentionId, Name = config.TeamsChannelMentionName });
        await SendMessageToTeamsChannelAsync(config.TeamsChannel, content);
        responseContent += $"Send message to Teams channel in {stopWatch.Elapsed.TotalSeconds:F2}s.\n";
    }
}
catch (Exception ex) {
    responseContent += $"Error: {ex.Message}\n{ex.StackTrace}\n";
}

Ending(responseContent);
